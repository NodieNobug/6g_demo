package org.edgeServer4.utils;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.security.SecureRandom;
import java.util.Random;

public class Paillier {
    // 密钥长度（比特）
    private static final int KEY_LENGTH = 1024;
    private static final int SCALE = 8; // 保留8位小数

    // 公钥参数
    private static final BigInteger n = new BigInteger(
            "17533783372108747920106125575318249359137735333005194441578747782393599787433943202952875760351329363857766976818251563500179216831309900947642732506035409652407968274784075323905219171820618745597343515557230611843344083186766176830424963734181436121771476891198077692143518128112930243186451897679296638047763174948689579891087827291519296363166049458478037878221226897746081327356627177998988868776953849647298447359560237430805518849369332381966727817161934002192070589843924492843526803012801399384257853005982792651324457735564496069314368048364828610804784990929091174060634507968837501831802488335819971428229");
    private static final BigInteger g = new BigInteger(
            "17533783372108747920106125575318249359137735333005194441578747782393599787433943202952875760351329363857766976818251563500179216831309900947642732506035409652407968274784075323905219171820618745597343515557230611843344083186766176830424963734181436121771476891198077692143518128112930243186451897679296638047763174948689579891087827291519296363166049458478037878221226897746081327356627177998988868776953849647298447359560237430805518849369332381966727817161934002192070589843924492843526803012801399384257853005982792651324457735564496069314368048364828610804784990929091174060634507968837501831802488335819971428230");

    // 私钥参数
    private static final BigInteger lambda = new BigInteger(
            "8766891686054373960053062787659124679568867666502597220789373891196799893716971601476437880175664681928883488409125781750089608415654950473821366253017704826203984137392037661952609585910309372798671757778615305921672041593383088415212481867090718060885738445599038846071759064056465121593225948839648319023748724516560638332471720556829811482618564785528548958240885045832101311879858417656999854250588188980777498176054206795424191964131583952776613405974034275703943683721005831989405354680444467149475089305831951192975935576659660554136087215776419185570907385980496876118312366031453648041582515057835761919542");

    // 计算mu = (L(g^lambda mod n^2))^(-1) mod n
    private static final BigInteger mu = new BigInteger(
            "9824035577960780375144357233395169247730164380409155999379812259969057644099782976339470679419066120047982004073642379926355199686805107665597865927459962153427585211240063216638433400393109638277214578212896845978716384826168842206240888344049483009044489159901753819107474939766917234018159773987892362813711205397873373629333582901739280903559536247702289746773031425501905534956074006094693803490077514963055464724608667782680516687335985145082359760637443793774490818429467831197070828177913657662397312791686959521904653435726289490684182399244211392307398829417281786500060491794032219253420896764658036028005");

    public static BigInteger encrypt(BigInteger m) {
        // 直接用BigDecimal包装，调用原有的encrypt(BigDecimal)
        return encrypt(new BigDecimal(m));
    }

    public static BigInteger encrypt(BigDecimal m) {
        // 将小数转换为整数（乘以10^8保留8位小数）
        BigDecimal scaled = m.setScale(SCALE, RoundingMode.HALF_UP);
        BigInteger m_int = scaled.multiply(BigDecimal.TEN.pow(SCALE)).toBigInteger();

        // 只对负数使用模n对称表示
        if (m_int.compareTo(BigInteger.ZERO) < 0) {
            m_int = m_int.mod(n);
        }

        // 生成随机数r
        Random rng = new SecureRandom();
        BigInteger r = new BigInteger(KEY_LENGTH, rng);

        // 计算密文 c = g^m * r^n mod n^2
        BigInteger n2 = n.multiply(n);
        BigInteger gm = g.modPow(m_int, n2);
        BigInteger rn = r.modPow(n, n2);
        return gm.multiply(rn).mod(n2);
    }

    public static BigDecimal decrypt(BigInteger c) {
        BigInteger n2 = n.multiply(n);
        BigInteger c_lambda = c.modPow(lambda, n2);
        BigInteger L = c_lambda.subtract(BigInteger.ONE).divide(n);
        BigInteger m = L.multiply(mu).mod(n);

        // 处理负数情况
        BigInteger halfN = n.divide(BigInteger.TWO);
        if (m.compareTo(halfN) > 0) {
            m = m.subtract(n);
        }

        // 将整数转换回小数（除以10^8）
        return new BigDecimal(m).divide(BigDecimal.TEN.pow(SCALE), SCALE, RoundingMode.HALF_UP);
    }

    // 获取公钥参数
    public static BigInteger getPublicKey() {
        return n;
    }

    // 获取生成元
    public static BigInteger getGenerator() {
        return g;
    }

    // 获取模数n的平方
    public static BigInteger getN2() {
        return n.multiply(n);
    }
}